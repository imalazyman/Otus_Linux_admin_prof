# roles/monitoring/templates/docker-compose.yml.j2
version: '3.8'

services:
  loki:
    image: grafana/loki:3.5.5
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/loki-config.yaml  # Монтируем наш новый конфиг
      # Убираем том с данными, используем временную директорию из конфига для простоты
      # - loki-data:/loki
    networks:
      - monitoring-net
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert-rules.yml:/etc/prometheus/alert-rules.yml 
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      # - '--alerting.rules=/etc/prometheus/alert-rules.yml' 
    networks:
      - monitoring-net
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.1.3
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST={{ grafana_smtp_host }}
      # - GF_SMTP_PORT={{ grafana_smtp_port | default(587) }} #
      - GF_SMTP_USER={{ grafana_smtp_user }}
      - GF_SMTP_PASSWORD={{ grafana_smtp_password }}
      - GF_SMTP_FROM_ADDRESS={{ grafana_smtp_from_address }}
      - GF_SMTP_FROM_NAME={{ grafana_smtp_from_name }}
      - GF_SMTP_SKIP_VERIFY={{ grafana_smtp_skip_verify | default("false") }}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
    networks:
      - monitoring-net
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:v1.8.1
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/volumes)($$|/)'
    networks:
      - monitoring-net
    restart: unless-stopped

  mysqld-exporter-primary:
    image: prom/mysqld-exporter:v0.14.0
    container_name: mysqld-exporter-primary
    ports:
      - "9104:9104"
    environment:
      - DATA_SOURCE_NAME=exporter:{{ mariadb_exporter_password }}@tcp(192.168.56.11:3306)/
    networks:
      - monitoring-net
    restart: unless-stopped

  mysqld-exporter-replica:
    image: prom/mysqld-exporter:v0.14.0  
    container_name: mysqld-exporter-replica
    ports:
      - "9105:9104"
    environment:
      - DATA_SOURCE_NAME=exporter:{{ mariadb_exporter_password }}@tcp(192.168.56.12:3306)/
    networks:
      - monitoring-net
    restart: unless-stopped

volumes:
  loki-data:
  prometheus-data:
  grafana-data:

networks:
  monitoring-net:
    driver: bridge
